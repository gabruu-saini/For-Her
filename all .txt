<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Happy Girlfriend's Day ‚ù§Ô∏è</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <div class="floating-hearts" id="heartsContainer"></div>
    <div class="container">
      <div class="main-section">
        <h1 class="main-title" id="girlfriendNameTitle">
          Happy Girlfriend's Day
        </h1>
        <p class="romantic-message">
          To the most beautiful soul who lights up my world ‚ú®<br />
          Today is all about celebrating YOU üíï
        </p>
        <div class="love-card">
          <div class="love-features">
            <div class="feature-card" onclick="showFeatureDetail(this)">
              <span class="feature-icon">üåπ</span>
              <div class="feature-title" style="display: none">Your Beauty</div>
              <div class="feature-text" style="display: none">
                Inside and out, you're absolutely stunning
              </div>
            </div>
            <div class="feature-card" onclick="showFeatureDetail(this)">
              <span class="feature-icon">üíù</span>
              <div class="feature-title" style="display: none">Your Heart</div>
              <div class="feature-text" style="display: none">
                So pure, loving and full of kindness
              </div>
            </div>
            <div class="feature-card" onclick="showFeatureDetail(this)">
              <span class="feature-icon">‚ú®</span>
              <div class="feature-title" style="display: none">Your Smile</div>
              <div class="feature-text" style="display: none">
                It brightens up even my darkest days
              </div>
            </div>
            <div class="feature-card" onclick="showFeatureDetail(this)">
              <span class="feature-icon">ü¶ã</span>
              <div class="feature-title" style="display: none">Your Spirit</div>
              <div class="feature-text" style="display: none">
                Free, beautiful and absolutely captivating
              </div>
            </div>
            <div class="feature-card" onclick="showFeatureDetail(this)">
              <span class="feature-icon">üí´</span>
              <div class="feature-title" style="display: none">Your Dreams</div>
              <div class="feature-text" style="display: none">
                I want to support every single one
              </div>
            </div>
            <div class="feature-card" onclick="showFeatureDetail(this)">
              <span class="feature-icon">üîí</span>
              <div class="feature-title" style="display: none">Our Bond</div>
              <div class="feature-text" style="display: none">
                Unbreakable, real and forever strong
              </div>
            </div>
          </div>
          <div class="memory-gallery">
            <!-- Memory Message Cards -->
            <div
              class="memory-box memory-message"
              onclick="showMemoryDetail(this, 'The night we watched the stars, hand in hand, and promised forever. üåå')"
            >
              üíï<span class="memory-label">Memory</span>
            </div>
            <div
              class="memory-box memory-message"
              onclick="showMemoryDetail(this, 'When you hugged me after a rough day, my world felt at peace. ü§ó')"
            >
              üå∏<span class="memory-label">Memory</span>
            </div>
            <div
              class="memory-box memory-message"
              onclick="showMemoryDetail(this, 'Laughing until midnight on our first road trip. üöóüí®')"
            >
              üíñ<span class="memory-label">Memory</span>
            </div>
            <!-- Image Memory Cards -->
            <div
              class="memory-box memory-photo"
              onclick="showMemoryImage(this, 'memory1.jpg', 'Our first selfie together!')"
            >
              üå∫<span class="memory-label">Photo</span>
            </div>
            <div
              class="memory-box memory-photo"
              onclick="showMemoryImage(this, 'memory2.jpg', 'Your smile lights up my world.')"
            >
              üíê<span class="memory-label">Photo</span>
            </div>
            <div
              class="memory-box memory-photo"
              onclick="showMemoryImage(this, 'memory3.jpg', 'Unforgettable day at the beach.')"
            >
              üéÄ<span class="memory-label">Photo</span>
            </div>
          </div>
        </div>

        <div class="surprise-section">
          <h2 class="surprise-title">I Have Something Special For You</h2>
          <p class="surprise-description">
            Words straight from my heart, written just for you...
          </p>
          <button class="unlock-button" onclick="revealPoem()">
            üíù Unlock My Heart üíù
          </button>
          <div class="poem-container" id="poemContainer">
            <div class="poem-text">
              <div class="stanza">
                <div>We've had our storms, I won't deny,</div>
                <div>some days we drift, some nights we cry.</div>
                <div>But through the noise, through all the strain,</div>
                <div>you're still my peace, my constant flame.</div>
              </div>
              <div class="stanza">
                <div>I don't love you for the easy part,</div>
                <div>I love your soul, your honest heart.</div>
                <div>Even when we break or fall apart,</div>
                <div>we find our way, we restart.</div>
              </div>
              <div class="stanza">
                <div>We're not perfect, and that's okay,</div>
                <div>we fight, we pause, but always stay.</div>
                <div>No crack can end what we begin,</div>
                <div>we lose, we learn and then we win.</div>
              </div>
              <div class="stanza">
                <div>So here's to us, the real, the true,</div>
                <div>no matter what, I'll stand with you.</div>
                <div>This love won't fade, it won't decay,</div>
                <div>I'm yours in every single way.</div>
              </div>
              <div class="stanza">
                <div>I see my future in your eyes,</div>
                <div>in dreams we hold and days to come.</div>
                <div>You're not just mine for now or then,</div>
                <div>you're my forever, time and again.</div>
              </div>
              <div class="final-message">
                So on this day, I just want to say,<br />
                I'd choose you still, in every way.<br />
                <strong>
                  Happy Girlfriend's Day, my life,<br />
                  my heartbeat, my strength,<br />
                  my future wife. ‚ù§Ô∏è
                </strong>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script src="script.js"></script>
  </body>
</html>


/* Reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Georgia', serif;
  background: linear-gradient(135deg, #ffeef8 0%, #fff0f5 50%, #ffe4e1 100%);
  min-height: 100vh;
  overflow-x: hidden;
  position: relative;
}

/* Floating petals */
.petal {
  position: absolute;
  opacity: 0.7;
  animation: fall 8s linear infinite;
  pointer-events: none;
}

@keyframes fall {
  0% {
    transform: translateY(-100px) rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: translateY(100vh) rotate(360deg);
    opacity: 0;
  }
}

/* Container */
.container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 15px;
  position: relative;
  z-index: 10;
}

/* Main section */
.main-section {
  text-align: center;
  padding: 40px 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 30px;
  box-shadow: 0 25px 50px rgba(0,0,0,0.1);
  backdrop-filter: blur(15px);
  border: 1px solid rgba(255, 255, 255, 0.5);
  margin: 20px 0;
  animation: slideIn 1.2s ease-out;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Title & Romantic message */
.main-title {
  font-size: 4rem;
  background: linear-gradient(45deg, #e91e63, #ff6b9d, #ff8a80);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin-bottom: 20px;
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
  animation: titleGlow 3s ease-in-out infinite alternate;
  line-height: 1.1;
}
@keyframes titleGlow {
  from { filter: brightness(1); }
  to { filter: brightness(1.2); }
}

.romantic-message {
  font-size: 1.4rem;
  color: #d81b60;
  margin-bottom: 30px;
  font-style: italic;
  line-height: 1.6;
}

/* Love card */
.love-card {
  background: linear-gradient(135deg, #fff 0%, #fce4ec 100%);
  padding: 30px;
  border-radius: 25px;
  margin: 30px 0;
  box-shadow: 0 15px 35px rgba(233, 30, 99, 0.15);
  border: 2px solid rgba(233, 30, 99, 0.1);
  position: relative;
  overflow: hidden;
}
.love-card::before {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, #e91e63, #ff6b9d, #ff8a80, #e91e63);
  z-index: -1;
  border-radius: 25px;
  animation: borderGlow 3s linear infinite;
}
@keyframes borderGlow {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

/* Features */
.love-features {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin: 30px 0;
}

.feature-card {
  background: rgba(255, 255, 255, 0.9);
  padding: 25px;
  border-radius: 20px;
  text-align: center;
  box-shadow: 0 10px 25px rgba(233, 30, 99, 0.1);
  border: 1px solid rgba(233, 30, 99, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
  user-select: none;
}
.feature-card:hover {
  transform: translateY(-10px);
  box-shadow: 0 20px 40px rgba(233, 30, 99, 0.2);
}

.feature-icon {
  font-size: 2.5rem;
  margin-bottom: 15px;
  display: block;
}

.feature-title {
  font-size: 1.2rem;
  color: #c2185b;
  margin-bottom: 10px;
  font-weight: bold;
}

.feature-text {
  color: #666;
  line-height: 1.5;
  font-size: 0.95rem;
}

/* Surprise section */
.surprise-section {
  background: linear-gradient(135deg, #e91e63, #ad1457);
  color: white;
  padding: 40px 30px;
  border-radius: 25px;
  margin: 30px 0;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
  position: relative;
  overflow: hidden;
}
.surprise-section::before {
  content: '';
  position: absolute;
  width: 200%;
  height: 200%;
  background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
  animation: shine 4s linear infinite;
  top: -50%;
  left: -50%;
}
@keyframes shine {
  0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
  100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
}

.surprise-title {
  font-size: 2.2rem;
  margin-bottom: 20px;
  position: relative;
  z-index: 2;
  line-height: 1.2;
}

.surprise-description {
  font-size: 1.1rem;
  margin-bottom: 25px;
  position: relative;
  z-index: 2;
  line-height: 1.4;
}

.unlock-button {
  background: rgba(255, 255, 255, 0.2);
  border: 2px solid white;
  color: white;
  padding: 18px 35px;
  font-size: 1.1rem;
  border-radius: 50px;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  position: relative;
  z-index: 2;
  margin: 20px 0;
  display: inline-block;
}
.unlock-button:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: scale(1.05);
}

/* Poem */
.poem-container {
  display: none;
  background: rgba(255, 255, 255, 0.95);
  padding: 30px;
  border-radius: 20px;
  margin-top: 25px;
  box-shadow: inset 0 0 20px rgba(0,0,0,0.1);
  position: relative;
  z-index: 2;
  text-align: left;
}

.poem-text {
  color: #333;
  font-size: 1rem;
  line-height: 1.7;
}

.stanza {
  margin-bottom: 20px;
  padding-left: 15px;
  border-left: 3px solid #e91e63;
  opacity: 0;
  animation: fadeInStanza 1s ease-out forwards;
}

.stanza div {
  margin-bottom: 5px;
}

@keyframes fadeInStanza {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.final-message {
  background: linear-gradient(135deg, #ff6b9d, #e91e63);
  color: white;
  padding: 20px;
  border-radius: 15px;
  margin-top: 20px;
  text-align: center;
  font-weight: bold;
  font-size: 1.1rem;
  line-height: 1.4;
}

/* Floating hearts container */
.floating-hearts {
  position: fixed;
  top: 0; left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.heart {
  position: absolute;
  color: #ff6b9d;
  font-size: 18px;
  animation: floatUp 6s linear infinite;
  opacity: 0;
}
@keyframes floatUp {
  0% {
    opacity: 0;
    transform: translateY(100vh) scale(0);
  }
  10% {
    opacity: 1;
    transform: translateY(90vh) scale(1);
  }
  90% {
    opacity: 1;
    transform: translateY(10vh) scale(1);
  }
  100% {
    opacity: 0;
    transform: translateY(-10vh) scale(0);
  }
}

/* Memory gallery */
.memory-gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 12px;
  margin: 25px 0;
  position: relative;
}

.memory-box {
  aspect-ratio: 1;
  background: linear-gradient(135deg, #fce4ec, #f8bbd9);
  border-radius: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.8rem;
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
  user-select: none;
}
.memory-box:hover {
  transform: scale(1.1) rotate(5deg);
}

/* Tooltip for memory box */
/* MEMORY TOOLTIP - for personal message memory cards */
.memory-tooltip {
  position: absolute;
  background: #fff0f5;
  color: #d81b60;
  padding: 8px 14px;
  border-radius: 10px;
  box-shadow: 0 2px 15px rgba(233,30,99,0.08);
  z-index: 999;
  font-size: 1rem;
  white-space: pre-line;
  top: 110%;
  left: 50%;
  transform: translateX(-50%);
  pointer-events: none;
  animation: fadeInMemo 0.4s;
}

@keyframes fadeInMemo {
  from {opacity:0; transform: translateX(-50%) scale(0.5);}
  to   {opacity:1; transform: translateX(-50%) scale(1);}
}

/* MEMORY IMAGE POPUP OVERLAY */
#memoryImagePopup {
  animation: fadeInMemo 0.4s;
  cursor: default;
}

#memoryImagePopup img {
  transition: box-shadow 0.18s;
  max-width: 80vw;
  max-height: 47vh;
  border-radius: 12px;
  margin-bottom: 13px;
}

#memoryImagePopup img:hover {
  box-shadow: 0 4px 24px rgba(233,30,99,0.18);
}


/* Responsive */
@media (max-width: 768px) {
  .container {
    padding: 10px;
  }
  .main-section {
    padding: 25px 15px;
    margin: 10px 0;
    border-radius: 20px;
  }
  .main-title {
    font-size: 2.2rem;
    margin-bottom: 15px;
  }
  .romantic-message {
    font-size: 1.1rem;
    margin-bottom: 20px;
  }
  .love-card {
    padding: 20px;
    margin: 20px 0;
    border-radius: 20px;
  }
  .love-features {
    grid-template-columns: 1fr;
    gap: 15px;
    margin: 20px 0;
  }
  .feature-card {
    padding: 20px;
  }
  .feature-icon {
    font-size: 2.2rem;
  }
  .feature-title {
    font-size: 1.1rem;
  }
  .feature-text {
    font-size: 0.9rem;
  }
  .surprise-section {
    padding: 25px 20px;
    margin: 20px 0;
    border-radius: 20px;
  }
  .surprise-title {
    font-size: 1.8rem;
    margin-bottom: 15px;
  }
  .surprise-description {
    font-size: 1rem;
    margin-bottom: 20px;
  }
  .unlock-button {
    padding: 15px 25px;
    font-size: 1rem;
    margin: 15px 0;
  }
  .poem-container {
    padding: 20px 15px;
    margin-top: 20px;
    border-radius: 15px;
  }
  .poem-text {
    font-size: 0.95rem;
    line-height: 1.6;
  }
  .stanza {
    margin-bottom: 15px;
    padding-left: 12px;
    border-left-width: 2px;
  }
  .final-message {
    padding: 18px 15px;
    font-size: 1rem;
    margin-top: 18px;
    border-radius: 12px;
  }
  .memory-gallery {
    grid-template-columns: repeat(2, 1fr);
    gap: 10px;
    margin: 20px 0;
  }
  .memory-box {
    font-size: 1.5rem;
    border-radius: 12px;
  }
  .heart {
    font-size: 16px;
  }
}

/* ************************************* */
/* FEATURE DETAIL OVERLAY & ANIMATIONS */
/* ************************************* */

.feature-overlay-bg {
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  /* Glassy blended background layer: */
  background:
    linear-gradient(120deg, rgba(247,153,205,0.17) 0%, rgba(255,255,255,0.35) 45%, rgba(255,240,245,0.7) 100%),
    rgba(255,255,255, 0.18);
  /* Apple-like ‚Äúglass‚Äù: */
  backdrop-filter: blur(36px) saturate(180%) brightness(1.13);
  -webkit-backdrop-filter: blur(36px) saturate(180%) brightness(1.13);
  border-top: 1.7px solid rgba(255,255,255,0.22);
  border-bottom: 1.7px solid rgba(233,30,99,0.12);
  box-shadow: 0 8px 40px 0 rgba(233,30,99,0.14), 0 2px 14px 0 rgba(220,70,150,0.10);
  /* Animation for fade-in (optional): */
  animation: fadeInOverlay 0.5s;
}

@keyframes fadeInOverlay {
  from { opacity: 0; }
  to   { opacity: 1; }
}

/* Inner glassy card bubble */
.feature-overlay-content {
  background: rgba(255,255,255,0.52);
  border-radius: 24px;
  box-shadow: 0 12px 40px 0 rgba(233,30,99,0.11);
  padding: 22px 8vw 30px 8vw;
  border: 1.8px solid rgba(255,183,213,0.20);
  backdrop-filter: blur(14px) brightness(1.14);
  -webkit-backdrop-filter: blur(14px) brightness(1.14);
}



.feature-title-big {
  font-size: 2.3rem;
  color: #e91e63;
  font-weight: 700;
  margin-bottom: 22px;
  opacity: 0;
  animation: titleAnim 0.8s forwards;
}
@keyframes titleAnim {
  from {
    transform: translateY(40px) scale(0.85);
    opacity: 0;
  }
  to {
    transform: translateY(0) scale(1);
    opacity: 1;
  }
}
.feature-text-big {
  font-size: 1.3rem;
  color: #d81b60;
  margin-top: 18px;
  opacity: 0;
  animation: textAnim 0.7s 0.7s forwards;
}
@keyframes textAnim {
  from {
    transform: scale(0.9);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

.emoji-rain {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  pointer-events: none;
  z-index: 10000;
  overflow: hidden;
}

.emoji-raindrop {
  position: absolute;
  top: 0;
  opacity: 0.92;
  user-select: none;
  pointer-events: none;
  animation: emojiDrop var(--duration, 6s) cubic-bezier(.55,.22,.64,1) forwards;
  will-change: transform, opacity;
  left: 0;
  --drift: 0vw;
  filter: drop-shadow(0 1.5px 5px rgba(233,30,99,0.28)); /* Glow so they're always visible */
}

@keyframes emojiDrop {
  0% {
    transform: translateY(-60px) translateX(0vw) scale(0.97) rotate(0deg);
    opacity: 0.9;
  }
  60% { opacity: 1; }
  97% { opacity: 0.77; }
  100% {
    transform: translateY(106vh) translateX(var(--drift)) scale(1.11) rotate(360deg);
    opacity: 0.12;
  }
}

@media (max-width: 768px) {
  .emoji-raindrop {
    font-size: 18px !important;
    opacity: 1;
  }
}


.feature-overlay-close {
  position: absolute;
  top: 18px;
  right: 18px;
  background: none;
  border: none;
  font-size: 2rem;
  color: #e91e63;
  cursor: pointer;
  transition: color 0.2s;
  z-index: 4;
}
.feature-overlay-close:hover {
  color: #ad1457;
}

@media (max-width: 768px) {
  .main-title {
    font-size: 2.2rem;
  }
  .feature-icon { font-size: 2.2rem; }
  .feature-title { font-size: 1.1rem; }
  .feature-overlay-content {
    min-width: 0;
    width: 90vw;
    padding: 20px 8px 30px 8px;
  }
  .feature-title-big { font-size: 1.18rem; }
  .feature-text-big { font-size: 1rem; }
  .emoji-raindrop {
    font-size: 18px !important;
  }
  .love-features, .memory-gallery {
    grid-template-columns: 1fr;
    gap: 13px;
  }
  .memory-box {
    font-size: 1.26rem;
    min-height: 54px;
  }
}

/* For very small phones */
@media (max-width: 440px) {
  .main-title { font-size: 1.18rem; }
  .feature-overlay-content { padding: 7vw 2vw; }
}

.memory-gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 13px;
  margin: 25px 0;
  position: relative;
  max-width: 520px;
  margin-left: auto;
  margin-right: auto;
}

.memory-box {
  aspect-ratio: 1;
  min-width: 70px;
  min-height: 70px;
  background: linear-gradient(130deg, #fce4ec 75%, #f8bbd9 100%);
  border-radius: 13px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  transition: box-shadow 0.2s, transform 0.2s;
  cursor: pointer;
  user-select: none;
  position: relative;
  box-shadow: 0 2px 10px 0 rgba(233,30,99,0.09);
}

.memory-message {
  border: 2px solid #e91e63;
  background: linear-gradient(120deg, #fff0f5 85%, #fad9ee 100%) !important;
}
.memory-photo {
  border: 2px solid #ad1457;
  background: linear-gradient(120deg, #e3f4fd 90%, #fff5fa 100%) !important;
}
.memory-box:hover, .memory-box:focus {
  transform: scale(1.05) rotate(-2deg);
  box-shadow: 0 4px 18px 0 rgba(233,30,99,0.18);
}

.memory-label {
  display: block;
  font-size: 0.75rem;
  margin-top: 3px;
  letter-spacing: 0.05em;
  color: #c2185b;
  background: #fff0f5;
  border-radius: 8px;
  padding: 1px 7px;
  margin-left: auto;
  margin-right: auto;
  opacity: 0.85;
}

/* Tooltip styling */
.memory-tooltip {
  position: absolute;
  background: #fff0f5;
  color: #d81b60;
  padding: 8px 14px;
  border-radius: 10px;
  box-shadow: 0 2px 15px rgba(233,30,99,0.08);
  z-index: 999;
  font-size: 1rem;
  white-space: pre-line;
  top: 110%;
  left: 50%;
  transform: translateX(-50%);
  pointer-events: none;
  animation: fadeInMemo 0.35s;
}
@keyframes fadeInMemo {
  from {opacity:0; transform: translateX(-50%) scale(0.88);}
  to   {opacity:1; transform: translateX(-50%) scale(1);}
}

/* Image popup overlay */
#memoryImagePopup {
  animation: fadeInMemo 0.35s;
  cursor: default;
}
#memoryImagePopup img {
  max-width: 79vw;
  max-height: 45vh;
  border-radius: 12px;
  margin-bottom: 12px;
  box-shadow: 0 2px 18px 0 rgba(233,30,99,0.13);
  transition: box-shadow 0.15s;
}
#memoryImagePopup img:hover {
  box-shadow: 0 4px 30px 0 rgba(233,30,99,0.17);
}

/* Fade + scale for the image popup overlay and inner photo box */
#memoryImagePopup {
  animation: fadeInMemo 0.35s;
  cursor: default;
  opacity: 0;
  transform: scale(0.92);
  transition: opacity 0.33s cubic-bezier(.4,1.2,.5,1), transform 0.33s cubic-bezier(.4,1.2,.5,1);
}
#memoryImagePopup.show {
  opacity: 1;
  transform: scale(1);
}
#memoryImagePopup img {
  max-width: 79vw;
  max-height: 45vh;
  border-radius: 12px;
  margin-bottom: 12px;
  box-shadow: 0 2px 18px 0 rgba(233,30,99,0.13);
  transition: box-shadow 0.15s;
}
#memoryImagePopup img:hover {
  box-shadow: 0 4px 30px 0 rgba(233,30,99,0.17);
}

.memory-gallery {
  /* ...existing grid props... */
  overflow: visible;
  row-gap: 20px; /* increase row space for tooltips on small screens */
}

.memory-tooltip {
  z-index: 5000; /* make sure it's above nearby content */
  pointer-events: none;
  white-space: pre-line;
  width: 90vw;
  max-width: 250px;
  text-align: center;
}
@media (max-width: 700px) {
  .memory-gallery {
    row-gap: 28px;
  }
  .memory-tooltip {
    font-size: 0.92rem;
    max-width: 87vw;
  }
}


// Floating hearts animation
function createFloatingHeart() {
  const heart = document.createElement('div');
  heart.className = 'heart';
  heart.innerHTML = ['üíñ', 'üíï', 'üíó', 'üíì'][Math.floor(Math.random() * 4)];
  heart.style.left = Math.random() * 100 + 'vw';
  heart.style.animationDelay = Math.random() * 2 + 's';
  heart.style.animationDuration = (Math.random() * 2 + 4) + 's';

  document.getElementById('heartsContainer').appendChild(heart);

  setTimeout(() => {
    heart.remove();
  }, 6000);
}
setInterval(createFloatingHeart, 3000);

// Flower petals animation
function createPetal() {
  const petal = document.createElement('div');
  petal.className = 'petal';
  petal.innerHTML = ['üå∏', 'üå∫', 'üåº', 'üåª'][Math.floor(Math.random() * 4)];
  petal.style.left = Math.random() * 100 + 'vw';
  petal.style.fontSize = (Math.random() * 15 + 20) + 'px';
  petal.style.animationDuration = (Math.random() * 3 + 5) + 's';

  document.body.appendChild(petal);

  setTimeout(() => {
    petal.remove();
  }, 8000);
}
setInterval(createPetal, 4000);

// Feature card 'click feedback' (optional quick effect)
function showMemory(card) {
  card.style.background = 'linear-gradient(135deg, #ff6b9d, #e91e63)';
  card.style.color = 'white';
  card.style.transform = 'scale(1.05)';
  setTimeout(() => {
    card.style.background = 'rgba(255, 255, 255, 0.9)';
    card.style.color = '';
    card.style.transform = '';
  }, 1000);
}

// Sparkles for memory boxes
function createSparkles(element) {
  for (let i = 0; i < 6; i++) {
    setTimeout(() => {
      const sparkle = document.createElement('div');
      sparkle.innerHTML = '‚ú®';
      sparkle.style.position = 'absolute';
      sparkle.style.pointerEvents = 'none';
      sparkle.style.fontSize = '20px';
      sparkle.style.zIndex = '1000';

      const rect = element.getBoundingClientRect();
      sparkle.style.left = rect.left + Math.random() * rect.width + 'px';
      sparkle.style.top = rect.top + Math.random() * rect.height + 'px';

      sparkle.style.animation = 'sparkleAnim 1.5s ease-out forwards';

      document.body.appendChild(sparkle);

      setTimeout(() => {
        sparkle.remove();
      }, 1500);
    }, i * 100);
  }
}

// Sparkle animation css insertion
const sparkleCSS = `
@keyframes sparkleAnim {
  0% { opacity: 0; transform: scale(0) rotate(0deg); }
  50% { opacity: 1; transform: scale(1) rotate(180deg); }
  100% { opacity: 0; transform: scale(0) rotate(360deg); }
}`;
const styleElem = document.createElement('style');
styleElem.textContent = sparkleCSS;
document.head.appendChild(styleElem);

// Reveal poem animation
function revealPoem() {
  const button = document.querySelector('.unlock-button');
  const container = document.getElementById('poemContainer');

  button.style.transform = 'scale(0.9)';
  button.innerHTML = 'üíï Opening my heart... üíï';

  setTimeout(() => {
    container.style.display = 'block';

    const stanzas = container.querySelectorAll('.stanza');
    stanzas.forEach((stanza, index) => {
      stanza.style.animationDelay = index * 0.5 + 's';
    });

    button.style.display = 'none';

    for (let i = 0; i < 20; i++) {
      setTimeout(createFloatingHeart, i * 100);
    }
  }, 500);
}

// FEATURE DETAIL OVERLAY WITH EMOJI RAIN

function showFeatureDetail(card) {
    const title = card.querySelector('.feature-title').innerText;
    const text = card.querySelector('.feature-text').innerText;
    const emoji = card.querySelector('.feature-icon').innerText;

    const overlay = document.createElement('div');
    overlay.className = 'feature-overlay-bg show';
    const content = document.createElement('div');
    content.className = 'feature-overlay-content';
    const titleElem = document.createElement('div');
    titleElem.className = 'feature-title-big';
    titleElem.innerText = title;
    const textElem = document.createElement('div');
    textElem.className = 'feature-text-big';
    textElem.innerText = text;
    const closeBtn = document.createElement('button');
    closeBtn.className = 'feature-overlay-close';
    closeBtn.setAttribute('aria-label', 'Close');
    closeBtn.innerHTML = '&times;';
    closeBtn.onclick = () => {
        document.body.removeChild(overlay);
        const emojiRain = document.getElementById('emojiRainOverlay');
        if (emojiRain) document.body.removeChild(emojiRain);
    };

    content.appendChild(closeBtn);
    content.appendChild(titleElem);
    content.appendChild(textElem);
    overlay.appendChild(content);
    document.body.appendChild(overlay);

    // Emoji rain (mobile optimized)
    const isMobile = window.matchMedia("(max-width: 768px)").matches;
    const emojiRain = document.createElement('div');
    emojiRain.className = 'emoji-rain';
    emojiRain.id = 'emojiRainOverlay';
    document.body.appendChild(emojiRain);

    const emojiCount = isMobile ? 19 : 40;
    let dropped = 0;
    function dropNextEmoji() {
        if (dropped >= emojiCount) return;
        const drop = document.createElement('div');
        drop.className = 'emoji-raindrop';
        drop.innerText = emoji;
        drop.style.left = Math.random() * (isMobile ? 92 : 98) + 'vw';
        drop.style.fontSize = (isMobile ? 15 + Math.random() * 8 : 28 + Math.random() * 21) + 'px';
        // longer smoother durations:
        const dur = isMobile ? (3.8 + Math.random() * 2) : (5.2 + Math.random() * 2.5);
        drop.style.setProperty('animation-duration', dur + 's');
        drop.style.setProperty('--duration', dur + 's');
        drop.style.setProperty('--drift', (Math.random()>0.5?1:-1)*(Math.random()*18+4)+'vw');
        drop.style.animationDelay = (Math.random() * 1.7) + 's';
        emojiRain.appendChild(drop);
        setTimeout(() => drop.remove(), dur * 1000 + 1200);
        dropped++;
        setTimeout(dropNextEmoji, 155 + Math.random()*180);
    }
    dropNextEmoji();

    setTimeout(() => {
        if (emojiRain.parentElement) emojiRain.parentElement.removeChild(emojiRain);
    }, (isMobile? 7 : 9) * 1000);
}



// Initial floating hearts & petals on page load
window.addEventListener('load', () => {
  for (let i = 0; i < 5; i++) setTimeout(createFloatingHeart, i * 1000);
  for (let i = 0; i < 3; i++) setTimeout(createPetal, i * 1500);
});


// Show message tooltip for personal memories
function showMemoryDetail(element, text) {
    // Remove old tooltip if any
    const prev = element.querySelector('.memory-tooltip');
    if (prev) prev.remove();

    // Create tooltip
    const tooltip = document.createElement('div');
    tooltip.className = 'memory-tooltip';
    tooltip.textContent = text;
    tooltip.style.position = 'absolute';
    tooltip.style.top = '110%';
    tooltip.style.left = '50%';
    tooltip.style.transform = 'translateX(-50%)';
    tooltip.style.background = '#fff0f5';
    tooltip.style.color = '#d81b60';
    tooltip.style.padding = '8px 14px';
    tooltip.style.borderRadius = '10px';
    tooltip.style.boxShadow = '0 2px 15px rgba(233,30,99,0.08)';
    tooltip.style.zIndex = '999';
    tooltip.style.fontSize = '1rem';
    tooltip.style.whiteSpace = 'pre-line';

    element.appendChild(tooltip);
    setTimeout(() => tooltip.remove(), 3400);
}

// Show popup with image and a short caption
function showMemoryImage(element, imgUrl, caption) {
    // Remove any previous popup
    let old = document.getElementById('memoryImagePopup');
    if (old) old.remove();

    // Create popup container
    const popup = document.createElement('div');
    popup.id = 'memoryImagePopup';
    popup.style.position = 'fixed';
    popup.style.top = '0'; popup.style.left = '0';
    popup.style.width = '100vw'; popup.style.height = '100vh';
    popup.style.display = 'flex';
    popup.style.alignItems = 'center';
    popup.style.justifyContent = 'center';
    popup.style.background = 'rgba(0,0,0,0.55)';
    popup.style.zIndex = '99999';

    // Create inner image and caption
    const inner = document.createElement('div');
    inner.style.background = '#fff';
    inner.style.borderRadius = '16px';
    inner.style.boxShadow = '0 8px 40px rgba(233,30,99,0.11)';
    inner.style.padding = '18px 12px 12px 12px';
    inner.style.textAlign = 'center';
    inner.style.maxWidth = '94vw';
    inner.style.maxHeight = '80vh';
    inner.style.position = 'relative';

    const img = document.createElement('img');
    img.src = imgUrl;
    img.alt = caption;
    img.style.maxWidth = '80vw';
    img.style.maxHeight = '47vh';
    img.style.borderRadius = '12px';
    img.style.marginBottom = '13px';
    inner.appendChild(img);

    const desc = document.createElement('div');
    desc.style.fontSize = '1rem';
    desc.style.color = '#c2185b';
    desc.style.marginBottom = '6px';
    desc.textContent = caption;
    inner.appendChild(desc);

    // Close button
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '√ó';
    closeBtn.style.position = 'absolute';
    closeBtn.style.top = '8px'; closeBtn.style.right = '16px';
    closeBtn.style.fontSize = '2rem';
    closeBtn.style.background = 'none';
    closeBtn.style.border = 'none';
    closeBtn.style.color = '#e91e63';
    closeBtn.style.cursor = 'pointer';
    closeBtn.onclick = function() { popup.remove(); }
    inner.appendChild(closeBtn);

    popup.appendChild(inner);
    document.body.appendChild(popup);

    // Optionally close on background click
    popup.onclick = function(e) {
        if (e.target === popup) popup.remove();
    }
}


// Show tooltip with a personal memory message
function showMemoryDetail(element, text) {
  const prev = element.querySelector('.memory-tooltip');
  if (prev) prev.remove();

  const tooltip = document.createElement('div');
  tooltip.className = 'memory-tooltip';
  tooltip.textContent = text;
  element.appendChild(tooltip);

  setTimeout(() => tooltip.remove(), 3400);
}

// Show popup overlay with image and caption
function showMemoryImage(element, imgUrl, caption) {
  let oldPopup = document.getElementById('memoryImagePopup');
  if (oldPopup) oldPopup.remove();

  const popup = document.createElement('div');
  popup.id = 'memoryImagePopup';
  popup.style.position = 'fixed';
  popup.style.top = '0';
  popup.style.left = '0';
  popup.style.width = '100vw';
  popup.style.height = '100vh';
  popup.style.display = 'flex';
  popup.style.alignItems = 'center';
  popup.style.justifyContent = 'center';
  popup.style.background = 'rgba(0, 0, 0, 0.54)';
  popup.style.zIndex = '99999';

  const inner = document.createElement('div');
  inner.style.background = '#fff';
  inner.style.borderRadius = '16px';
  inner.style.boxShadow = '0 8px 40px rgba(233,30,99,0.11)';
  inner.style.padding = '18px 12px 12px 12px';
  inner.style.textAlign = 'center';
  inner.style.maxWidth = '94vw';
  inner.style.maxHeight = '80vh';
  inner.style.position = 'relative';

  const img = document.createElement('img');
  img.src = imgUrl;
  img.alt = caption;
  img.loading = 'lazy';
  inner.appendChild(img);

  const desc = document.createElement('div');
  desc.style.fontSize = '1rem';
  desc.style.color = '#c2185b';
  desc.style.marginBottom = '6px';
  desc.textContent = caption;
  inner.appendChild(desc);

  const closeBtn = document.createElement('button');
  closeBtn.textContent = '√ó';
  closeBtn.style.position = 'absolute';
  closeBtn.style.top = '8px';
  closeBtn.style.right = '16px';
  closeBtn.style.fontSize = '2rem';
  closeBtn.style.background = 'none';
  closeBtn.style.border = 'none';
  closeBtn.style.color = '#e91e63';
  closeBtn.style.cursor = 'pointer';
  closeBtn.onclick = () => popup.remove();
  inner.appendChild(closeBtn);

  document.body.appendChild(popup);
setTimeout(() => popup.classList.add('show'), 10); // allow transition to trigger


  popup.onclick = (event) => {
    if (event.target === popup) popup.remove();
  };
}

function showMemoryDetail(element, text) {
  // Remove previous tooltip if it exists
  const prev = element.querySelector('.memory-tooltip');
  if (prev) prev.remove();

  // Create tooltip
  const tooltip = document.createElement('div');
  tooltip.className = 'memory-tooltip';
  tooltip.textContent = text;
  element.appendChild(tooltip);

  // Auto-hide after ~3s
  setTimeout(() => tooltip.remove(), 3000);
}

function showMemoryImage(element, imgUrl, caption) {
  // Remove existing popup if any
  let old = document.getElementById('memoryImagePopup');
  if (old) old.remove();

  // Create popup overlay
  const popup = document.createElement('div');
  popup.id = 'memoryImagePopup';
  popup.style.position = 'fixed';
  popup.style.top = '0';
  popup.style.left = '0';
  popup.style.width = '100vw';
  popup.style.height = '100vh';
  popup.style.display = 'flex';
  popup.style.alignItems = 'center';
  popup.style.justifyContent = 'center';
  popup.style.background = 'rgba(0,0,0,0.54)';
  popup.style.zIndex = '99999';

  const inner = document.createElement('div');
  inner.style.background = '#fff';
  inner.style.borderRadius = '16px';
  inner.style.boxShadow = '0 8px 40px rgba(233,30,99,0.13)';
  inner.style.padding = '18px 12px 12px 12px';
  inner.style.textAlign = 'center';
  inner.style.maxWidth = '94vw';
  inner.style.maxHeight = '80vh';
  inner.style.position = 'relative';

  // Image
  const img = document.createElement('img');
  img.src = imgUrl;
  img.alt = caption;
  img.loading = 'lazy';
  inner.appendChild(img);

  // Caption
  const desc = document.createElement('div');
  desc.style.fontSize = '1rem';
  desc.style.color = '#c2185b';
  desc.style.marginBottom = '6px';
  desc.textContent = caption;
  inner.appendChild(desc);

  // Close button
  const closeBtn = document.createElement('button');
  closeBtn.textContent = '√ó';
  closeBtn.style.position = 'absolute';
  closeBtn.style.top = '8px';
  closeBtn.style.right = '16px';
  closeBtn.style.fontSize = '2rem';
  closeBtn.style.background = 'none';
  closeBtn.style.border = 'none';
  closeBtn.style.color = '#e91e63';
  closeBtn.style.cursor = 'pointer';
  closeBtn.onclick = () => popup.remove();
  inner.appendChild(closeBtn);

  popup.appendChild(inner);
  document.body.appendChild(popup);

  // Allow closing by background click
  popup.onclick = (event) => {
    if (event.target === popup) popup.remove();
  };
}